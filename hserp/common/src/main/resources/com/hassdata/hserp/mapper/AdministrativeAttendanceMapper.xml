<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hassdata.hserp.dao.AdministrativeAttendanceMapper">
  <resultMap id="BaseResultMap" type="com.hassdata.hserp.po.AdministrativeAttendance">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="third_id" jdbcType="VARCHAR" property="thirdId" />
    <result column="userId" jdbcType="VARCHAR" property="userid" />
    <result column="locationResult" jdbcType="VARCHAR" property="locationresult" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="on_time" jdbcType="VARCHAR" property="onTime" />
    <result column="under_time" jdbcType="VARCHAR" property="underTime" />
    <result column="timeResult" jdbcType="VARCHAR" property="timeresult" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
  </resultMap>
  <sql id="administrative_attendanceColumns">
    <![CDATA[ id,third_id,userId,locationResult,name,on_time,under_time,timeResult,remarks ]]>
  </sql>
  <sql id="administrative_attendanceDynamicWhere">
    <where>
      <if test="null != id and '' !=  id">and id = #{ id}</if>
      <if test="null != thirdId and '' !=  thirdId">and third_id = #{ thirdId}</if>
      <if test="null != userid and '' !=  userid">and userId = #{ userid}</if>
      <if test="null != locationresult and '' !=  locationresult">and locationResult = #{ locationresult}</if>
      <if test="null != name and '' !=  name">and name = #{ name}</if>
      <if test="null != onTime and '' !=  onTime">and on_time = #{ onTime}</if>
      <if test="null != underTime and '' !=  underTime">and under_time = #{ underTime}</if>
      <if test="null != timeresult and '' !=  timeresult">and timeResult = #{ timeresult}</if>
      <if test="null != remarks and '' !=  remarks">and remarks = #{ remarks}</if>
	</where>
  </sql>
  <sql id="administrative_attendanceDynamicLikeWhere">
    <where>
      <if test="null != id and '' !=  id">and id LIKE #{ id}</if>
      <if test="null != thirdId and '' !=  thirdId">and third_id LIKE #{ thirdId}</if>
      <if test="null != userid and '' !=  userid">and userId LIKE #{ userid}</if>
      <if test="null != locationresult and '' !=  locationresult">and locationResult LIKE #{ locationresult}</if>
      <if test="null != name and '' !=  name">and name LIKE #{ name}</if>
      <if test="null != onTime and '' !=  onTime">and on_time LIKE #{ onTime}</if>
      <if test="null != underTime and '' !=  underTime">and under_time LIKE #{ underTime}</if>
      <if test="null != timeresult and '' !=  timeresult">and timeResult LIKE #{ timeresult}</if>
      <if test="null != remarks and '' !=  remarks">and remarks LIKE #{ remarks}</if>
	</where>
  </sql>
  <select id="getById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select <include refid="administrative_attendanceColumns" /> from  administrative_attendance where id = #{id}
  </select>
  <select id="getOne" parameterType="com.hassdata.hserp.po.AdministrativeAttendance" resultMap="BaseResultMap">
    select <include refid="administrative_attendanceColumns" /> from  administrative_attendance <include refid="administrative_attendanceDynamicWhere" /> limit 0 , 1
  </select>
  <select id="list" parameterType="map" resultMap="BaseResultMap">
    select <include refid="administrative_attendanceColumns" /> from  administrative_attendance <include refid="administrative_attendanceDynamicWhere" />
	<if test="orderBy != null and orderBy != ''">
          order by ${orderBy}
      </if>
  </select>
  <select id="listPage" parameterType="map" resultMap="BaseResultMap">
    select <include refid="administrative_attendanceColumns" /> from  administrative_attendance <include refid="administrative_attendanceDynamicWhere" />
	<if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
  </select>
  <select id="listLikePage" parameterType="map" resultMap="BaseResultMap">
    select <include refid="administrative_attendanceColumns" /> from  administrative_attendance <include refid="administrative_attendanceDynamicLikeWhere" />
	<if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
  </select>
  <select id="countLike" parameterType="com.hassdata.hserp.po.AdministrativeAttendance" resultType="java.lang.Long">
    select count(1) from administrative_attendance <include refid="administrative_attendanceDynamicLikeWhere" />
  </select>
  <select id="count" parameterType="com.hassdata.hserp.po.AdministrativeAttendance" resultType="java.lang.Long">
    select count(1) from administrative_attendance <include refid="administrative_attendanceDynamicWhere" />
  </select>
  <sql id="save_administrative_attendance_columns">
    insert into administrative_attendance(
		third_id ,userId ,locationResult ,name ,on_time ,under_time ,timeResult ,remarks
	) values
  </sql>
  <sql id="save_administrative_attendance_values">
    (
	  #{ thirdId,jdbcType=VARCHAR},
	  #{ userid,jdbcType=VARCHAR},
	  #{ locationresult,jdbcType=VARCHAR},
	  #{ name,jdbcType=VARCHAR},
	  #{ onTime,jdbcType=VARCHAR},
	  #{ underTime,jdbcType=VARCHAR},
	  #{ timeresult,jdbcType=VARCHAR},
	  #{ remarks,jdbcType=VARCHAR}
	)
  </sql>
  <insert id="save" keyProperty="id" parameterType="com.hassdata.hserp.po.AdministrativeAttendance" useGeneratedKeys="true">
    <include refid="save_administrative_attendance_columns" /><include refid="save_administrative_attendance_values" />
  </insert>
  <insert id="batchSave" parameterType="list">
    <foreach collection="list" index="index" item="item" open="" separator=";" close="">
	  <include refid="save_administrative_attendance_columns" /><include refid="save_administrative_attendance_values" />
	</foreach>
  </insert>
  <sql id="administrative_attendanceUpdate">
    update administrative_attendance 
	<set> 
      <if test="null != thirdId">third_id = #{ thirdId,jdbcType=VARCHAR},</if>
      <if test="null != userid">userId = #{ userid,jdbcType=VARCHAR},</if>
      <if test="null != locationresult">locationResult = #{ locationresult,jdbcType=VARCHAR},</if>
      <if test="null != name">name = #{ name,jdbcType=VARCHAR},</if>
      <if test="null != onTime">on_time = #{ onTime,jdbcType=VARCHAR},</if>
      <if test="null != underTime">under_time = #{ underTime,jdbcType=VARCHAR},</if>
      <if test="null != timeresult">timeResult = #{ timeresult,jdbcType=VARCHAR},</if>
      <if test="null != remarks">remarks = #{ remarks,jdbcType=VARCHAR}</if>
	</set>
	where id = #{id}
  </sql>
  <update id="update" parameterType="com.hassdata.hserp.po.AdministrativeAttendance">
    <include refid="administrative_attendanceUpdate" />
  </update>
  <update id="batchUpdate" parameterType="list">
    <foreach collection="list" index="index" item="item" open="" separator=";" close="">
	  <include refid="administrative_attendanceUpdate" />
	</foreach>
  </update>
  <delete id="delById">
    <![CDATA[ delete from administrative_attendance where id = #{id} ]]>
  </delete>
  <delete id="delArray">
    delete from administrative_attendance where id in
	<foreach collection="array" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </delete>
  <delete id="delList">
    delete from administrative_attendance where id in
	<foreach collection="list" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
  </delete>
</mapper>