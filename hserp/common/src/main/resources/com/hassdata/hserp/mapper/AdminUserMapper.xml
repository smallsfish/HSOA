<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hassdata.hserp.dao.AdminUserMapper">
    <resultMap id="BaseResultMap" type="com.hassdata.hserp.po.AdminUser">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="account" jdbcType="VARCHAR" property="account"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="headimage" jdbcType="VARCHAR" property="headimage"/>
        <result column="identifier" jdbcType="VARCHAR" property="identifier"/>
        <result column="createdatetime" jdbcType="TIMESTAMP" property="createdatetime"/>
        <result column="lastlogintime" jdbcType="TIMESTAMP" property="lastlogintime"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="salt" jdbcType="VARCHAR" property="salt"/>
        <result column="locked" jdbcType="BIT" property="locked"/>
    </resultMap>
    <sql id="admin_userColumns">
    <![CDATA[
         id,account,password,email,headimage,identifier,createdatetime,lastlogintime,remarks,salt,locked
        ]]>
  </sql>
    <sql id="admin_userDynamicWhere">
        <where>
            <if test="null != id and '' !=  id">and id = #{ id}</if>
            <if test="null != account and '' !=  account">and account = #{ account}</if>
            <if test="null != password and '' !=  password">and password = #{ password}</if>
            <if test="null != email and '' !=  email">and email = #{ email}</if>
            <if test="null != headimage and '' !=  headimage">and headimage = #{ headimage}</if>
            <if test="null != identifier and '' !=  identifier">and identifier = #{ identifier}</if>
            <if test="null != createdatetime and '' !=  createdatetime">and createdatetime = #{ createdatetime}</if>
            <if test="null != lastlogintime and '' !=  lastlogintime">and lastlogintime = #{ lastlogintime}</if>
            <if test="null != remarks and '' !=  remarks">and remarks = #{ remarks}</if>
            <if test="null != salt and '' !=  salt">and salt = #{ salt}</if>
            <if test="null != locked and '' !=  locked">and locked = #{ locked}</if>
        </where>
    </sql>
    <sql id="admin_userDynamicLikeWhere">
        <where>
            <if test="null != id and '' !=  id">and id LIKE #{ id}</if>
            <if test="null != account and '' !=  account">and account LIKE #{ account}</if>
            <if test="null != password and '' !=  password">and password LIKE #{ password}</if>
            <if test="null != email and '' !=  email">and email LIKE #{ email}</if>
            <if test="null != headimage and '' !=  headimage">and headimage LIKE #{ headimage}</if>
            <if test="null != identifier and '' !=  identifier">and identifier LIKE #{ identifier}</if>
            <if test="null != createdatetime and '' !=  createdatetime">and createdatetime LIKE #{ createdatetime}</if>
            <if test="null != lastlogintime and '' !=  lastlogintime">and lastlogintime LIKE #{ lastlogintime}</if>
            <if test="null != remarks and '' !=  remarks">and remarks LIKE #{ remarks}</if>
            <if test="null != salt and '' !=  salt">and salt LIKE #{ salt}</if>
            <if test="null != locked and '' !=  locked">and locked LIKE #{ locked}</if>
        </where>
    </sql>
    <select id="getById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="admin_userColumns"/>
        from admin_user where id = #{id}
    </select>
    <select id="getOne" parameterType="com.hassdata.hserp.po.AdminUser" resultMap="BaseResultMap">
        select
        <include refid="admin_userColumns"/>
        from admin_user
        <include refid="admin_userDynamicWhere"/>
        limit 0 , 1
    </select>
    <select id="list" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="admin_userColumns"/>
        from admin_user
        <include refid="admin_userDynamicWhere"/>
        <if test="orderBy != null and orderBy != ''">
            order by ${orderBy}
        </if>
    </select>
    <select id="listPage" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="admin_userColumns"/>
        from admin_user
        <include refid="admin_userDynamicWhere"/>
        <if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
    </select>
    <select id="listLikePage" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="admin_userColumns"/>
        from admin_user
        <include refid="admin_userDynamicLikeWhere"/>
        <if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="fromIndex != null and fromIndex > -1 and pageSize != null and pageSize > 0">
            limit #{fromIndex},#{pageSize}
        </if>
    </select>
    <select id="countLike" parameterType="com.hassdata.hserp.po.AdminUser" resultType="java.lang.Long">
        select count(1) from admin_user
        <include refid="admin_userDynamicLikeWhere"/>
    </select>
    <select id="count" parameterType="com.hassdata.hserp.po.AdminUser" resultType="java.lang.Long">
        select count(1) from admin_user
        <include refid="admin_userDynamicWhere"/>
    </select>
    <sql id="save_admin_user_columns">
    insert into admin_user(
		account ,password ,email ,headimage ,identifier ,createdatetime ,lastlogintime ,remarks ,salt ,locked
	) values
  </sql>
    <sql id="save_admin_user_values">
    (
	  #{ account,jdbcType=VARCHAR},
	  #{ password,jdbcType=VARCHAR},
	  #{ email,jdbcType=VARCHAR},
	  #{ headimage,jdbcType=VARCHAR},
	  #{ identifier,jdbcType=VARCHAR},
	  #{ createdatetime,jdbcType=TIMESTAMP},
	  #{ lastlogintime,jdbcType=TIMESTAMP},
	  #{ remarks,jdbcType=VARCHAR},
	  #{ salt,jdbcType=VARCHAR},
	  #{ locked,jdbcType=BIT}
	)
  </sql>
    <insert id="save" keyProperty="id" parameterType="com.hassdata.hserp.po.AdminUser" useGeneratedKeys="true">
        <include refid="save_admin_user_columns"/>
        <include refid="save_admin_user_values"/>
    </insert>
    <insert id="batchSave" parameterType="list">
        <foreach collection="list" index="index" item="item" open="" separator=";" close="">
            <include refid="save_admin_user_columns"/>
            <include refid="save_admin_user_values"/>
        </foreach>
    </insert>
    <sql id="admin_userUpdate">
        update admin_user
        <set>
            <if test="null != account">account = #{ account,jdbcType=VARCHAR},</if>
            <if test="null != password">password = #{ password,jdbcType=VARCHAR},</if>
            <if test="null != email">email = #{ email,jdbcType=VARCHAR},</if>
            <if test="null != headimage">headimage = #{ headimage,jdbcType=VARCHAR},</if>
            <if test="null != identifier">identifier = #{ identifier,jdbcType=VARCHAR},</if>
            <if test="null != createdatetime">createdatetime = #{ createdatetime,jdbcType=TIMESTAMP},</if>
            <if test="null != lastlogintime">lastlogintime = #{ lastlogintime,jdbcType=TIMESTAMP},</if>
            <if test="null != remarks">remarks = #{ remarks,jdbcType=VARCHAR},</if>
            <if test="null != salt">salt = #{ salt,jdbcType=VARCHAR},</if>
            <if test="null != locked">locked = #{ locked,jdbcType=BIT}</if>
        </set>
        where id = #{id}
    </sql>
    <update id="update" parameterType="com.hassdata.hserp.po.AdminUser">
        <include refid="admin_userUpdate"/>
    </update>
    <update id="batchUpdate" parameterType="list">
        <foreach collection="list" index="index" item="item" open="" separator=";" close="">
            <include refid="admin_userUpdate"/>
        </foreach>
    </update>
    <delete id="delById">
    <![CDATA[
         delete from admin_user where id = #{id}
        ]]>
  </delete>
    <delete id="delArray">
        delete from admin_user where id in
        <foreach collection="array" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
    </delete>
    <delete id="delList">
        delete from admin_user where id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">#{item}</foreach>
    </delete>


    <select id="findRoleByAccount" resultType="java.lang.String" parameterType="string">
    select rolename from role where id in (select rid from admin_role where aid = (select id from admin_user where account=#{account})) and available = 1
  </select>

    <select id="findPermissionByAccount" resultType="java.lang.String" parameterType="string">
    select permission from resource where id in (select reid from role_resource where rid in (select rid from admin_role where aid=(select id from admin_user where account=#{account}) ) ) and available = 1 and permission is not null
  </select>

    <select id="getIdMax" resultType="java.lang.Integer">
    SELECT max(id) FROM admin_user
  </select>
</mapper>